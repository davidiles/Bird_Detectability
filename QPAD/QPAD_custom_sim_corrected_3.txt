library(tidyverse)
library(reshape2)
library(jagsUI)
library(ggpubr)

rm(list=ls())

phi = 0.2
tau = 1

est_df <- data.frame()

for (simrep in 1:1000){
  
  print(simrep)
  
  # ------------------------------------
  # Place birds on landscape
  # ------------------------------------
  
  N = 1000000
  dim = 3
  birds <- data.frame(bird_id = 1:N,
                      x = runif(N,-dim/2,dim/2),
                      y = runif(N,-dim/2,dim/2))
  
  Density = N/dim^2 # Birds per ha

  # Distances to observer
  birds$dist <- sqrt(birds$x^2 + birds$y^2)
  
  # ------------------------------------
  # Simulate bird cues, based on phi
  # ------------------------------------
  
  cues <- matrix(NA, nrow=N, ncol = 10)
  for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi))
  cues <- cues %>% 
    reshape2::melt() %>% 
    rename(bird_id = Var1, cue_number = Var2, time = value) %>%
    arrange(bird_id,cue_number)
  
  cues$dist <- birds$dist[cues$bird_id]
  
  # ------------------------------------
  # Determine which cues are detected, based on tau
  # ------------------------------------
  
  # QPAD ONLY WORKS IF THE FOLLOWING SNIPPET IS USED FIRST
  # Only select first cue for each bird
  #cues <- subset(cues, cue_number == 1)
  
  cues$p<- exp(-(cues$dist/tau)^2)  # Probability cue is detected
  cues$detected <- rbinom(nrow(cues),1,cues$p) # binary variable: was cue detected?
  
  # ------------------------------------
  # Isolate first detected cue for each bird
  # ------------------------------------
  
  dat <- subset(cues,detected == 1)
  dat <- dat[!duplicated(dat$bird_id),]
  
  # ------------------------------------
  # Transcription: distance and time bins
  # ------------------------------------
  rbin <- c(0.5,1,Inf)
  tbin <- c(4,8,12)
  
  # Separate into distance and time bins
  dat$rbin <- cut(dat$dist,c(0,rbin))
  dat$tbin <- cut(dat$time,c(0,tbin))
  dat <- na.omit(dat)
  
  Y <- table(dat[,c("rbin","tbin")])
  Y
  apply(Y,2,function(x) x/sum(x))
  
  # Distance model
  Y_distance = matrix(rowSums(Y),1)
  D_distance = matrix(rbin,1)
  nbins_distance <- length(Y_distance)
  
  # Removal model
  Y_removal = matrix(colSums(Y),1)
  D_removal = matrix(tbin,1)
  nbins_removal <- length(Y_removal)
  
  # ------------------------------
  # Analysis using conditional maximum likelihood
  # ------------------------------
  
  fit.q <- cmulti.fit(Y_distance,D_distance, type = "dis")
  tau_MLE = exp(fit.q$coefficients)
  
  fit.p <- cmulti.fit(Y_removal,D_removal, type = "rem")
  phi_MLE = exp(fit.p$coefficients)
  
  
  # ------------------------------
  # Expected proportions in each time bin, under phi
  # ------------------------------
  
  cdf_tbin <- p_removal <- c()
  for (i in 1:nbins_removal){
    cdf_tbin[i] <- 1-exp(-tbin[i]*phi)
  }
  
  # cell probabilities
  p_removal[1] <- cdf_tbin[1]- 0
  for (i in 2:nbins_removal){
    p_removal[i] <- cdf_tbin[i] - cdf_tbin[i-1]
  }
  
  p_removal/sum(p_removal)
  Y_removal/sum(Y_removal) # More birds detected in largest time bin than expected
  
  # ------------------------------
  # Expected proportions in each distance bin, under tau
  # ------------------------------
  
  cdf_rbin <- p_distance <- c()
  for (i in 1:nbins_distance){
    cdf_rbin[i] <- 1-exp(-(rbin[i]/tau)^2)
  }
  
  # Cell probabilities
  p_distance[1] <- cdf_rbin[1]- 0
  for (i in 2:nbins_distance){
    p_distance[i] <- cdf_rbin[i] - cdf_rbin[i-1]
  }
  
  p_distance
  Y_distance/sum(Y_distance) # More birds detected in farthest distance category than expected
  
  # ------------------------------
  # Expected proportions in each distance bin, under tau
  # ------------------------------
  
  #if detection probability decreases, this will lower phi proportionally in that distance bin.
  #if phi increases, that will increase tau proportionally in that bin (?)
  
  # ** Observed cue rate will depend on distance to the observer
  #    Need to adjust cell probabilities to accomodate this
  
  p_matrix <- Y*NA
  for (i in 1:nrow(Y)){
    
    cdf_tbin <- p_removal <- c()
    for (j in 1:nbins_removal){
      cdf_tbin[j] <- 1-exp(-tbin[j]*phi*p_distance[i])
    }
    
    # cell probabilities
    p_removal[1] <- cdf_tbin[1]- 0
    for (j in 2:nbins_removal){
      p_removal[j] <- cdf_tbin[j] - cdf_tbin[j-1]
    }
    
    for (j in 1:ncol(Y)){
      p_matrix[i,j] <- p_distance[i] * p_removal[j]
    }
  }
  
  p_matrix = p_matrix/sum(p_matrix)
  p_matrix
  Y/sum(Y)
  
  # ------------------------------------
  # Analysis with JAGS
  # ------------------------------------
  
  # Model script
  sink("dist.jags")
  cat("
    model {
    
    # ------------------------------
    # Priors
    # ------------------------------

    # Prior for EDR
    tau ~ dunif(0,5)
    #tau ~ dgamma(0.001,0.001)
    
    # Prior for phi
    phi ~ dunif(0,2)
    #phi ~ dgamma(0.001,0.001)
    
    # ------------------------------
    # Specify multinomial cell probabilities
    # ------------------------------

    for (i in 1:nbins_distance){
      cdf_rbin[i] <- 1-exp(-(rbin[i]/tau)^2)
    }
    
    # Cell probabilities
    p_distance[1] <- cdf_rbin[1]- 0
    for (i in 2:nbins_distance){
      p_distance[i] <- cdf_rbin[i] - cdf_rbin[i-1]
    }
    
    for (i in 1:nbins_distance){
      for (j in 1:nbins_removal){
        cdf_tbin[i,j] <- 1-exp(-tbin[j]*phi*p_distance[i])
      }
      
      
      # cell probabilities
      p_removal[i,1] <- cdf_tbin[i,1]- 0
      for (j in 2:nbins_removal){
        p_removal[i,j] <- cdf_tbin[i,j] - cdf_tbin[i,j-1]
      }
      
      for (j in 1:nbins_removal){
        p_matrix[i,j] <- p_distance[i] * p_removal[i,j]
      }
    }
  
    for (i in 1:nbins_distance){
      for (j in 1:nbins_removal){
      
        p_matrix_corrected[i,j] <- p_matrix[i,j]/sum(p_matrix[1:nbins_distance, 1:nbins_removal])
    
      }
    }
    
    for (j in 1:nbins_removal){
      pp_removal[j] <- sum(p_matrix_corrected[1:nbins_distance,j])
    }
    
    for (i in 1:nbins_distance){
      pp_distance[i] <- sum(p_matrix_corrected[i,1:nbins_removal])
    }
    
    # ------------------------------
    # Likelihoods
    # ------------------------------
    Y_removal[1,1:nbins_removal] ~ dmulti(pp_removal[],N_removal)
    Y_distance[1,1:nbins_distance] ~ dmulti(pp_distance[],N_distance)

    # Y[1:nbins_distance,1:nbins_removal] ~ dmulti(p_matrix_corrected[1:nbins_distance,1:nbins_removal],N)

    }
",fill = TRUE)
  sink()
  
  jags_data <- list(#Y = as.matrix(Y),
    #N = sum(Y),
    Y_distance = Y_distance,
    N_distance = sum(Y_distance),
    Y_removal = Y_removal,
    N_removal = sum(Y_removal),
    rbin = rbin,
    nbins_distance = length(rbin),
    tbin = tbin,
    nbins_removal = length(tbin)
  )
  
  out <- jags(data = jags_data,
              model.file =  "dist.jags",
              parameters.to.save = c("tau","phi"),
              inits = NULL,
              n.chains = 3,
              n.thin = 1,
              n.iter = 10000,
              n.burnin = 5000,
              parallel = TRUE)
  
  out
  
  # Estimate density
  A_hat = pi*tau_MLE^2
  p_hat = 1-exp(-10*phi_MLE)
  D_hat <- sum(Y)/(A_hat*p_hat)
  
  est_df <- rbind(est_df,
                  data.frame(simrep = simrep,
                             N_detected = sum(Y),
                             D_hat = D_hat,
                             
                             tau_MLE = tau_MLE,
                             tau_q50 = out$q50$tau,
                             tau_q025 = out$q2.5$tau,
                             tau_q975 = out$q97.5$tau,
                             
                             phi_MLE = phi_MLE,
                             phi_q50 = out$q50$phi,
                             phi_q025 = out$q2.5$phi,
                             phi_q975 = out$q97.5$phi ))
  
  plot_tau <- ggplot(est_df,aes(x = simrep, y = tau_q50, ymin = tau_q025, ymax = tau_q975))+
    geom_point()+
    geom_point(data = est_df,aes(x = simrep, y = tau_MLE), shape = 4)+
    geom_errorbar(width=0.1)+
    geom_hline(yintercept = tau, size=2,col="dodgerblue",alpha=0.5)+
    geom_hline(yintercept = mean(est_df$tau_q50), linetype = 2)+
    theme_bw()
  #plot_tau
  
  plot_phi <- ggplot(est_df,aes(x = simrep, y = phi_q50, ymin = phi_q025, ymax = phi_q975))+
    geom_point()+
    geom_point(data = est_df,aes(x = simrep, y = phi_MLE), shape = 4)+
    geom_errorbar(width=0.1)+
    geom_hline(yintercept = phi, size=2,col="dodgerblue",alpha=0.5)+
    geom_hline(yintercept = mean(est_df$phi_q50), linetype = 2)+
    theme_bw()
  #plot_phi
  
  estimate_plot <- ggarrange(plot_tau,plot_phi, nrow=2)
  print(estimate_plot)
}
library(tidyverse)
library(reshape2)
library(jagsUI)
library(ggpubr)

rm(list=ls())

phi = 0.2
tau = 1

est_df <- data.frame()

for (simrep in 1:1000){
  
  print(simrep)
  
  # ------------------------------------
  # Place birds on landscape
  # ------------------------------------
  
  N = 1000
  dim = 10
  birds <- data.frame(bird_id = 1:N,
                      x = runif(N,-dim/2,dim/2),
                      y = runif(N,-dim/2,dim/2))
  
  Density = N/dim^2 # Birds per ha
  
  # Distances to observer
  birds$dist <- sqrt(birds$x^2 + birds$y^2)
  
  # ------------------------------------
  # Simulate bird cues, based on phi
  # ------------------------------------
  
  cues <- matrix(NA, nrow=N, ncol = 10)
  for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi))
  cues <- cues %>% 
    reshape2::melt() %>% 
    rename(bird_id = Var1, cue_number = Var2, time = value) %>%
    arrange(bird_id,cue_number)
  
  cues$dist <- birds$dist[cues$bird_id]
  
  # ------------------------------------
  # Determine which cues are detected, based on tau
  # ------------------------------------
  
  # QPAD ONLY WORKS IF THE FOLLOWING SNIPPET IS USED FIRST
  # Only select first cue for each bird
  #cues <- subset(cues, cue_number == 1)
  
  cues$p<- exp(-(cues$dist/tau)^2)  # Probability cue is detected
  cues$detected <- rbinom(nrow(cues),1,cues$p) # binary variable: was cue detected?
  
  # ------------------------------------
  # Isolate first detected cue for each bird
  # ------------------------------------
  
  dat <- subset(cues,detected == 1)
  dat <- dat[!duplicated(dat$bird_id),]
  
  # ------------------------------------
  # Transcription: distance and time bins
  # ------------------------------------
  rbin <- c(0.5,1,Inf)
  tbin <- c(3,5,10)
  
  # Separate into distance and time bins
  dat$rbin <- cut(dat$dist,c(0,rbin))
  dat$tbin <- cut(dat$time,c(0,tbin))
  dat <- na.omit(dat)
  
  Y <- table(dat[,c("rbin","tbin")])
  Y
  apply(Y,2,function(x) x/sum(x))
  
  # Distance model
  Y_distance = matrix(rowSums(Y),1)
  D_distance = matrix(rbin,1)
  nbins_distance <- length(Y_distance)
  
  # Removal model
  Y_removal = matrix(colSums(Y),1)
  D_removal = matrix(tbin,1)
  nbins_removal <- length(Y_removal)
  
  # ------------------------------
  # Analysis using conditional maximum likelihood
  # ------------------------------
  
  fit.q <- cmulti.fit(Y_distance,D_distance, type = "dis")
  tau_MLE = exp(fit.q$coefficients)
  
  fit.p <- cmulti.fit(Y_removal,D_removal, type = "rem")
  phi_MLE = exp(fit.p$coefficients)
  
  
  # ------------------------------
  # Expected proportions in each time bin, under phi
  # ------------------------------
  
  cdf_tbin <- p_removal <- c()
  for (i in 1:nbins_removal){
    cdf_tbin[i] <- 1-exp(-tbin[i]*phi)
  }
  
  # cell probabilities
  p_removal[1] <- cdf_tbin[1]- 0
  for (i in 2:nbins_removal){
    p_removal[i] <- cdf_tbin[i] - cdf_tbin[i-1]
  }
  
  p_removal/sum(p_removal)
  Y_removal/sum(Y_removal) # More birds detected in largest time bin than expected
  
  # ------------------------------
  # Expected proportions in each distance bin, under tau
  # ------------------------------
  
  cdf_rbin <- p_distance <- c()
  for (i in 1:nbins_distance){
    cdf_rbin[i] <- 1-exp(-(rbin[i]/tau)^2)
  }
  
  # Cell probabilities
  p_distance[1] <- cdf_rbin[1]- 0
  for (i in 2:nbins_distance){
    p_distance[i] <- cdf_rbin[i] - cdf_rbin[i-1]
  }
  
  p_distance
  Y_distance/sum(Y_distance) # More birds detected in farthest distance category than expected
  
  # ------------------------------
  # Expected proportions in each distance bin, under tau
  # ------------------------------
  
  #if detection probability decreases, this will lower phi proportionally in that distance bin.
  #if phi increases, that will increase tau proportionally in that bin (?)
  
  # ** Observed cue rate will depend on distance to the observer
  #    Need to adjust cell probabilities to accomodate this
  
  p_matrix <- Y*NA
  for (i in 1:nrow(Y)){
    
    cdf_tbin <- p_removal <- c()
    for (j in 1:nbins_removal){
      cdf_tbin[j] <- 1-exp(-tbin[j]*phi*p_distance[i])
    }
    
    # cell probabilities
    p_removal[1] <- cdf_tbin[1]- 0
    for (j in 2:nbins_removal){
      p_removal[j] <- cdf_tbin[j] - cdf_tbin[j-1]
    }
    
    for (j in 1:ncol(Y)){
      p_matrix[i,j] <- p_distance[i] * p_removal[j]
    }
  }
  
  p_matrix = p_matrix/sum(p_matrix)
  p_matrix
  Y/sum(Y)
  
  # ------------------------------------
  # Analysis with JAGS
  # ------------------------------------
  
  # Model script
  sink("dist.jags")
  cat("
    model {
    
    # ------------------------------
    # Priors
    # ------------------------------

    # Prior for EDR
    tau ~ dunif(0,5)
    #tau ~ dgamma(0.001,0.001)
    
    # Prior for phi
    phi ~ dunif(0,2)
    #phi ~ dgamma(0.001,0.001)
    
    # ------------------------------
    # Specify multinomial cell probabilities
    # ------------------------------

    for (i in 1:nbins_distance){
      cdf_rbin[i] <- 1-exp(-(rbin[i]/tau)^2)
    }
    
    # Cell probabilities
    p_distance[1] <- cdf_rbin[1]- 0
    for (i in 2:nbins_distance){
      p_distance[i] <- cdf_rbin[i] - cdf_rbin[i-1]
    }
    
    for (i in 1:nbins_distance){
      for (j in 1:nbins_removal){
        cdf_tbin[i,j] <- 1-exp(-tbin[j]*phi*p_distance[i])
      }
      
      
      # cell probabilities
      p_removal[i,1] <- cdf_tbin[i,1]- 0
      for (j in 2:nbins_removal){
        p_removal[i,j] <- cdf_tbin[i,j] - cdf_tbin[i,j-1]
      }
      
      for (j in 1:nbins_removal){
        p_matrix[i,j] <- p_distance[i] * p_removal[i,j]
      }
    }
  
    for (i in 1:nbins_distance){
      for (j in 1:nbins_removal){
      
        p_matrix_corrected[i,j] <- p_matrix[i,j]/sum(p_matrix[1:nbins_distance, 1:nbins_removal])
    
      }
    }
    
    for (j in 1:nbins_removal){
      pp_removal[j] <- sum(p_matrix_corrected[1:nbins_distance,j])
    }
    
    for (i in 1:nbins_distance){
      pp_distance[i] <- sum(p_matrix_corrected[i,1:nbins_removal])
    }
    
    # ------------------------------
    # Likelihoods
    # ------------------------------
    Y_removal[1,1:nbins_removal] ~ dmulti(pp_removal[],N_removal)
    Y_distance[1,1:nbins_distance] ~ dmulti(pp_distance[],N_distance)

    # Y[1:nbins_distance,1:nbins_removal] ~ dmulti(p_matrix_corrected[1:nbins_distance,1:nbins_removal],N)

    }
",fill = TRUE)
  sink()
  
  jags_data <- list(#Y = as.matrix(Y),
    #N = sum(Y),
    Y_distance = Y_distance,
    N_distance = sum(Y_distance),
    Y_removal = Y_removal,
    N_removal = sum(Y_removal),
    rbin = rbin,
    nbins_distance = length(rbin),
    tbin = tbin,
    nbins_removal = length(tbin)
  )
  
  out <- jags(data = jags_data,
              model.file =  "dist.jags",
              parameters.to.save = c("tau","phi"),
              inits = NULL,
              n.chains = 3,
              n.thin = 1,
              n.iter = 10000,
              n.burnin = 5000,
              parallel = TRUE)
  
  out
  
  # Estimate density
  A_hat = pi*tau_MLE^2
  p_hat = 1-exp(-10*phi_MLE)
  D_hat <- sum(Y)/(A_hat*p_hat)
  
  est_df <- rbind(est_df,
                  data.frame(simrep = simrep,
                             N_detected = sum(Y),
                             D_hat = D_hat,
                             
                             tau_MLE = tau_MLE,
                             tau_q50 = out$q50$tau,
                             tau_q025 = out$q2.5$tau,
                             tau_q975 = out$q97.5$tau,
                             
                             phi_MLE = phi_MLE,
                             phi_q50 = out$q50$phi,
                             phi_q025 = out$q2.5$phi,
                             phi_q975 = out$q97.5$phi ))
  
  plot_tau <- ggplot(est_df,aes(x = simrep, y = tau_q50, ymin = tau_q025, ymax = tau_q975))+
    geom_point()+
    geom_point(data = est_df,aes(x = simrep, y = tau_MLE), shape = 4)+
    geom_errorbar(width=0.1)+
    geom_hline(yintercept = tau, size=2,col="dodgerblue",alpha=0.5)+
    geom_hline(yintercept = mean(est_df$tau_q50), linetype = 2)+
    theme_bw()
  #plot_tau
  
  plot_phi <- ggplot(est_df,aes(x = simrep, y = phi_q50, ymin = phi_q025, ymax = phi_q975))+
    geom_point()+
    geom_point(data = est_df,aes(x = simrep, y = phi_MLE), shape = 4)+
    geom_errorbar(width=0.1)+
    geom_hline(yintercept = phi, size=2,col="dodgerblue",alpha=0.5)+
    geom_hline(yintercept = mean(est_df$phi_q50), linetype = 2)+
    theme_bw()
  #plot_phi
  
  estimate_plot <- ggarrange(plot_tau,plot_phi, nrow=2)
  print(estimate_plot)
}


