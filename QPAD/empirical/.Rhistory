ggtitle("EDR")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$tau), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = tau_MLE), col = "red", size = 5)+
geom_text(aes(x = 1.1, y = tau_MLE, label = "QPAD"), col = "red", size = 5,hjust = 0)+
ylab("Tau / EDR")+
xlab("")+
theme_bw()+
scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("EDR")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$tau), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = tau_MLE), col = "red", size = 5)+
geom_text(aes(x = 1.1, y = tau_MLE, label = "QPAD"), col = "red", size = 5,hjust = 0)+
ylab("Tau / EDR")+
xlab("")+
theme_bw()+
scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("Tau / EDR")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
phiplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$phi), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = phi_MLE), col = "red", size = 5)+
geom_text(aes(x = 1.1, y = phi_MLE, label = "QPAD"), col = "red", size = 5,hjust = 0)+
ylab("phi / EDR")+
xlab("")+
theme_bw()+
scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("phi / EDR")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
phiplot
phiplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$phi), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = phi_MLE), col = "red", size = 5)+
geom_text(aes(x = 1.1, y = phi_MLE, label = "QPAD"), col = "red", size = 5,hjust = 0)+
ylab("phi / EDR")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("phi / EDR")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
phiplot
tauplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$tau), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = tau_MLE), col = "red", size = 5)+
geom_text(aes(x = 1.1, y = tau_MLE, label = "QPAD"), col = "red", size = 5,hjust = 0)+
ylab("Tau / EDR")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("Tau / EDR")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
phiplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$phi), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = phi_MLE), col = "red", size = 5)+
geom_text(aes(x = 1.1, y = phi_MLE, label = "QPAD"), col = "red", size = 5,hjust = 0)+
ylab("phi / EDR")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("phi / EDR")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
phiplot
tauplot
compare_plot <- ggarrange(tauplot,phiplot,ncol = 2)
compare_plot
phiplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$phi), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = phi_MLE), col = "red", size = 5)+
geom_text(aes(x = 1.1, y = phi_MLE, label = "QPAD"), col = "red", size = 5,hjust = 0)+
ylab("phi / EDR")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("phi / cue rate")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
tauplot
phiplot
compare_plot <- ggarrange(tauplot,phiplot,ncol = 2)
compare_plot
tauplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$tau), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = tau_MLE), col = "red", size = 5)+
geom_text(aes(x = 1.1, y = tau_MLE, label = "QPAD"), col = "red", size = 5,hjust = 0)+
ylab("tau / EDR")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("tau / EDR")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
phiplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$phi), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = phi_MLE), col = "red", size = 5)+
geom_text(aes(x = 1.1, y = phi_MLE, label = "QPAD"), col = "red", size = 5,hjust = 0)+
ylab("phi / EDR")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("phi / cue rate")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
tauplot
phiplot
compare_plot <- ggarrange(tauplot,phiplot,ncol = 2)
compare_plot
?ggarrange
compare_plot <- ggarrange(tauplot,phiplot,ncol = 2) %>%
annotate_figure(top = "OVEN")
compare_plot
compare_plot <- ggarrange(tauplot,phiplot,ncol = 2) %>%
annotate_figure(top = "OVEN\n\n")
compare_plot
png("OVEN.png", width = 6, height = 4, units = "in", res = 500)
print(compare_plot)
dev.off()
tauplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$tau), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = tau_MLE), col = "red", size = 5)+
geom_text(aes(x = 1.1, y = tau_MLE, label = "QPAD"), col = "red", size = 2,hjust = 0)+
ylab("tau / EDR")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("tau / EDR")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
phiplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$phi), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = phi_MLE), col = "red", size = 5)+
geom_text(aes(x = 1.1, y = phi_MLE, label = "QPAD"), col = "red", size = 2,hjust = 0)+
ylab("phi / EDR")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("phi / cue rate")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
compare_plot <- ggarrange(tauplot,phiplot,ncol = 2) %>%
annotate_figure(top = "OVEN\n\n")
compare_plot
png("OVEN.png", width = 6, height = 4, units = "in", res = 500)
print(compare_plot)
dev.off()
tauplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$tau), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = tau_MLE), col = "red", size = 3)+
geom_text(aes(x = 1.1, y = tau_MLE, label = "QPAD"), col = "red", size = 2,hjust = 0)+
ylab("tau / EDR")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("tau / EDR")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
phiplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$phi), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = phi_MLE), col = "red", size = 3)+
geom_text(aes(x = 1.1, y = phi_MLE, label = "QPAD"), col = "red", size = 2,hjust = 0)+
ylab("phi / EDR")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("phi / cue rate")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
compare_plot <- ggarrange(tauplot,phiplot,ncol = 2) %>%
annotate_figure(top = "OVEN\n\n")
compare_plot
png("OVEN.png", width = 6, height = 4, units = "in", res = 500)
print(compare_plot)
dev.off()
tauplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$tau), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = tau_MLE), col = "red", size = 3)+
geom_text(aes(x = 1.1, y = tau_MLE, label = "QPAD"), col = "red", size = 2,hjust = 0)+
ylab("tau")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("tau / EDR")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
phiplot = ggplot()+
geom_violin(aes(x = 1, y = out$sims.list$phi), fill = "cornflowerblue",
draw_quantiles = c(0.05,0.5,0.95), col = "blue")+
geom_point(aes(x = 1, y = phi_MLE), col = "red", size = 3)+
geom_text(aes(x = 1.1, y = phi_MLE, label = "QPAD"), col = "red", size = 2,hjust = 0)+
ylab("phi")+
xlab("")+
theme_bw()+
#scale_y_continuous(limits = c(50,100))+
scale_x_continuous(limits = c(0,2))+
ggtitle("phi / cue rate")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
compare_plot <- ggarrange(tauplot,phiplot,ncol = 2) %>%
annotate_figure(top = "OVEN\n\n")
compare_plot
png("OVEN.png", width = 6, height = 4, units = "in", res = 500)
print(compare_plot)
dev.off()
out
plot(out$sims.list$phi ~ out$sims.list$tau)
plot(out$sims.list$phi ~ out$sims.list$tau, xlab = "tau", ylab = "phi")
sink("QPAD_corrected_vectorized.jags")
library(bSims)
library(ggpubr)
library(tidyverse)
library(detect)
library(jagsUI)
library(reshape2)
library(readxl)
setwd("~/1_Work/Bird_Detectability/QPAD/empirical")
rm(list=ls())
# ----------------------------------------
# Read OVEN data
# ----------------------------------------
#file <- "BLPWdetectionhistories.xlsx"
file <- "OVENdetectionhistory.xlsx"
dat <- read_xlsx(file) %>%
rename(tbin = 10, dbin = 11)
dat <- dat %>%
group_by(dbin,tbin) %>%
summarize(count = n()) %>%
na.omit()
dat$dbin <- factor(dat$dbin, levels = c("0-49 m","50-100 m",">100 m"))
dat$tbin <- factor(dat$tbin, levels = sort(unique(dat$tbin)))
dat <- dat %>% arrange(dbin,tbin)
# Convert to matrix
tint <- seq(1,10)
rint <- c(50,100,Inf)
Y = dat %>% spread(tbin, count)
Y <- as.matrix(Y[,2:ncol(Y)])
#colnames(Y) <- tint
rownames(Y) <- levels(dat$dbin)
Y[is.na(Y)] <- 0
# ----------------------------------------
# Fit using standard QPAD
# ----------------------------------------
# Distance model
Y_distance = matrix(rowSums(Y),1)
D_distance = matrix(rint,1)
# Removal model
Y_removal = matrix(colSums(Y),1)
D_removal = matrix(tint,1)
fit.q <- cmulti.fit(Y_distance,D_distance, type = "dis")
tau_MLE = exp(fit.q$coefficients)
fit.p <- cmulti.fit(Y_removal,D_removal, type = "rem")
phi_MLE = exp(fit.p$coefficients)
tau_MLE # 92
phi_MLE # 0.39
# ----------------------------------------
# Refit distance model using only first time interval
# ----------------------------------------
# Distance model
Y_distance = matrix(Y[,1],1)
D_distance = matrix(rint,1)
fit.q <- cmulti.fit(Y_distance,D_distance, type = "dis")
tau_MLE_2 = exp(fit.q$coefficients)
tau_MLE_2 # 82
# ----------------------------------------
# Refit time-removal model using only first distance interval
# ----------------------------------------
# Removal model
Y_removal = matrix(Y[1,],1)
D_removal = matrix(tint,1)
fit.p <- cmulti.fit(Y_removal,D_removal, type = "rem")
phi_MLE_2 = exp(fit.p$coefficients)
phi_MLE_2 # 0.39
# ----------------------------------------
# Comparisons
# ----------------------------------------
phi_MLE   # Using all distance bins
phi_MLE_2 # Using only nearest distance bin
tau_MLE   # Using all time bins
tau_MLE_2 # Using only first time bin
A_hat1 = pi*tau_MLE^2
p_hat = 1-exp(-max(tint)*phi_MLE)
D_hat <- sum(Y)/(A_hat*p_hat)
A_hat = pi*tau_MLE^2
p_hat = 1-exp(-max(tint)*phi_MLE)
D_hat <- sum(Y)/(A_hat*p_hat)
library(bSims)
library(ggpubr)
library(tidyverse)
library(detect)
library(jagsUI)
library(reshape2)
library(readxl)
setwd("~/1_Work/Bird_Detectability/QPAD/empirical")
rm(list=ls())
# ----------------------------------------
# Read OVEN data
# ----------------------------------------
#file <- "BLPWdetectionhistories.xlsx"
file <- "OVENdetectionhistory.xlsx"
dat <- read_xlsx(file) %>%
rename(tbin = 10, dbin = 11)
dat <- dat %>%
group_by(dbin,tbin) %>%
summarize(count = n()) %>%
na.omit()
dat$dbin <- factor(dat$dbin, levels = c("0-49 m","50-100 m",">100 m"))
dat$tbin <- factor(dat$tbin, levels = sort(unique(dat$tbin)))
dat <- dat %>% arrange(dbin,tbin)
# Convert to matrix
tint <- seq(1,10)
rint <- c(50,100,Inf)
Y = dat %>% spread(tbin, count)
Y <- as.matrix(Y[,2:ncol(Y)])
#colnames(Y) <- tint
rownames(Y) <- levels(dat$dbin)
Y[is.na(Y)] <- 0
# ----------------------------------------
# Fit using standard QPAD
# ----------------------------------------
# Distance model
Y_distance = matrix(rowSums(Y),1)
D_distance = matrix(rint,1)
# Removal model
Y_removal = matrix(colSums(Y),1)
D_removal = matrix(tint,1)
fit.q <- cmulti.fit(Y_distance,D_distance, type = "dis")
tau_MLE = exp(fit.q$coefficients)
fit.p <- cmulti.fit(Y_removal,D_removal, type = "rem")
phi_MLE = exp(fit.p$coefficients)
tau_MLE # 92
phi_MLE # 0.39
# ----------------------------------------
# Refit distance model using only first time interval
# ----------------------------------------
# Distance model
Y_distance = matrix(Y[,1],1)
D_distance = matrix(rint,1)
fit.q <- cmulti.fit(Y_distance,D_distance, type = "dis")
tau_MLE_2 = exp(fit.q$coefficients)
tau_MLE_2 # 82
# ----------------------------------------
# Refit time-removal model using only first distance interval
# ----------------------------------------
# Removal model
Y_removal = matrix(Y[1,],1)
D_removal = matrix(tint,1)
fit.p <- cmulti.fit(Y_removal,D_removal, type = "rem")
phi_MLE_2 = exp(fit.p$coefficients)
phi_MLE_2 # 0.39
# ----------------------------------------
# Comparisons
# ----------------------------------------
phi_MLE   # Using all distance bins
phi_MLE_2 # Using only nearest distance bin
tau_MLE   # Using all time bins
tau_MLE_2 # Using only first time bin
A_hat = pi*tau_MLE^2
p_hat = 1-exp(-max(tint)*phi_MLE)
D_hat <- sum(Y)/(A_hat*p_hat)
A_hat_2 = pi*tau_MLE_2^2
p_hat_2 = 1-exp(-max(tint)*phi_MLE_2)
D_hat_2 <- sum(Y)/(A_hat_2*p_hat_2)
D_hat
library(bSims)
library(ggpubr)
library(tidyverse)
library(detect)
library(jagsUI)
library(reshape2)
library(readxl)
setwd("~/1_Work/Bird_Detectability/QPAD/empirical")
rm(list=ls())
# ----------------------------------------
# Read OVEN data
# ----------------------------------------
#file <- "BLPWdetectionhistories.xlsx"
file <- "OVENdetectionhistory.xlsx"
dat <- read_xlsx(file) %>%
rename(tbin = 10, dbin = 11)
dat <- dat %>%
group_by(dbin,tbin) %>%
summarize(count = n()) %>%
na.omit()
dat$dbin <- factor(dat$dbin, levels = c("0-49 m","50-100 m",">100 m"))
dat$tbin <- factor(dat$tbin, levels = sort(unique(dat$tbin)))
dat <- dat %>% arrange(dbin,tbin)
# Convert to matrix
tint <- seq(1,10)
rint <- c(50,100,Inf)
Y = dat %>% spread(tbin, count)
Y <- as.matrix(Y[,2:ncol(Y)])
#colnames(Y) <- tint
rownames(Y) <- levels(dat$dbin)
Y[is.na(Y)] <- 0
# ----------------------------------------
# Fit using standard QPAD
# ----------------------------------------
# Distance model
Y_distance = matrix(rowSums(Y),1)
D_distance = matrix(rint,1)
# Removal model
Y_removal = matrix(colSums(Y),1)
D_removal = matrix(tint,1)
fit.q <- cmulti.fit(Y_distance,D_distance, type = "dis")
tau_MLE = exp(fit.q$coefficients)
fit.p <- cmulti.fit(Y_removal,D_removal, type = "rem")
phi_MLE = exp(fit.p$coefficients)
tau_MLE # 92
phi_MLE # 0.39
# ----------------------------------------
# Refit distance model using only first time interval
# ----------------------------------------
# Distance model
Y_distance = matrix(Y[,1],1)
D_distance = matrix(rint,1)
fit.q <- cmulti.fit(Y_distance,D_distance, type = "dis")
tau_MLE_2 = exp(fit.q$coefficients)
tau_MLE_2 # 82
# ----------------------------------------
# Refit time-removal model using only first distance interval
# ----------------------------------------
# Removal model
Y_removal = matrix(Y[1,],1)
D_removal = matrix(tint,1)
fit.p <- cmulti.fit(Y_removal,D_removal, type = "rem")
phi_MLE_2 = exp(fit.p$coefficients)
phi_MLE_2 # 0.39
# ----------------------------------------
# Comparisons
# ----------------------------------------
phi_MLE   # Using all distance bins
phi_MLE_2 # Using only nearest distance bin
tau_MLE   # Using all time bins
tau_MLE_2 # Using only first time bin
A_hat = pi*tau_MLE^2
p_hat = 1-exp(-max(tint)*phi_MLE)
D_hat <- sum(Y)/(A_hat*p_hat)
A_hat_2 = pi*tau_MLE_2^2
p_hat_2 = 1-exp(-max(tint)*phi_MLE_2)
D_hat_2 <- sum(Y)/(A_hat_2*p_hat_2)
D_hat
tau_MLE_2 # Using only first time bin
phi_MLE_2 # Using only nearest distance bin
phi_MLE   # Using all distance bins
tau_MLE   # Using all time bins
tau_MLE_2 # Using only first time bin
A_hat = pi*tau_MLE^2
p_hat = 1-exp(-max(tint)*phi_MLE)
D_hat <- sum(Y)/(A_hat*p_hat)
A_hat_2 = pi*tau_MLE_2^2
p_hat_2 = 1-exp(-max(tint)*phi_MLE_2)
D_hat_2 <- sum(Y)/(A_hat_2*p_hat_2)
D_hat
D_hat_2
Y
phi_MLE   # Using all distance bins
phi_MLE_2 # Using only nearest distance bin
p_hat_2
p_hat
tint
