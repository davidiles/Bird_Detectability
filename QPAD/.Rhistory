p3 = c(0.5,1),
p4 = c(0.5,Inf),
p5 = Inf,
p6 = 1)
# A few different protocols for time binning
time_protocols <- list(p1 = c(3,5,10),
p2 = 3,
p3 = 5,
p4 = 10,
p5 = seq(1,10,1))
# Maximum number of distance bins in the dataset
mdbin <- sapply(distance_protocols,function(x) length(x)) %>% max()
# Maximum number of time bins in the dataset
mtbin <- sapply(time_protocols,function(x) length(x)) %>% max()
# -------------------------------------------------
# Data from each point count is stored in a series of arrays
# -------------------------------------------------
Yarray <- array(NA,dim=c(nsurvey,mdbin,mtbin))
rarray <- array(NA,dim=c(nsurvey,mdbin))
tarray <- array(NA,dim=c(nsurvey,mtbin))
# Simulate point counts (takes a little while for large sample sizes and/or high densities)
for (k in 1:nsurvey){
# Parameters for this survey
tau_true <- tau[k]
phi_true <- phi[k]
Density_true <- Density[k]
# Determine if this will be a human or ARU survey
ARU <- sample(c(TRUE,FALSE),1,prob=c(0.5,0.5))
if (ARU){
rint <- Inf
tint <- seq(1,10)
} else{
rint <- c(0.5,1,Inf)
tint <- seq(1,10)
}
# Randomly select sampling protocol
nrint <- length(rint)
ntint <- length(tint)
rarray[k,1:length(rint)] <- rint
tarray[k,1:length(tint)] <- tint
# ------------------------------------
# Place birds on landscape around observer (centred on landscape)
# ------------------------------------
dim <- 10 # landscape x and y dimensions (100 metre increments)
N <- rpois(1,Density_true*dim^2) # Number of birds to place on landscape
if (N>0){
birds <- data.frame(x = runif(N,-dim/2,dim/2),
y = runif(N,-dim/2,dim/2))
# Distances to observer
birds$dist <- sqrt(birds$x^2 + birds$y^2)
birds <- birds %>% arrange(dist)
birds$bird_id = 1:nrow(birds)
# ------------------------------------
# Simulate bird cues, based on phi_true
# ------------------------------------
cues <- matrix(NA, nrow=N, ncol = 100)
# For each bird, simulate time between cues
for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi_true))
# Convert to a dataframe
cues <- cues %>%
reshape2::melt() %>%
rename(bird_id = Var1, cue_number = Var2, time = value) %>%
arrange(bird_id,cue_number)
# Distance of each cue from the observer
cues$dist <- birds$dist[cues$bird_id]
# ------------------------------------
# Determine which cues are detected, based on tau_true
# ------------------------------------
cues$p<- exp(-(cues$dist/tau_true)^2)  # Probability each cue is detected
cues$detected <- rbinom(nrow(cues),1,cues$p) # binary variable: was cue actually detected?
# ------------------------------------
# Isolate first detected cue for each bird
# ------------------------------------
# Only select cues that were detected
dat <- subset(cues,detected == 1)
# Only select the first cue detected for each bird
dat <- dat[!duplicated(dat$bird_id),]
# ------------------------------------
# Transcribe the observed data
# ------------------------------------
# Separate into distance and time bins
dat$rint <- cut(dat$dist,c(0,rint))
dat$tint <- cut(dat$time,c(0,tint))
dat <- na.omit(dat)
Y <- table(dat[,c("rint","tint")])
Yarray[k,1:nrint,1:ntint] <- Y
} else{
Yarray[k,1:nrint,1:ntint] <- 0
}
}
# Total number of birds detected at each point count
Ysum <- apply(Yarray,1,sum,na.rm=TRUE)
# Number of point counts that detected at least one bird
sum(Ysum>0)
Yarray[1,,] # Data from first point count
rarray[1,]  # Distance bins used for the first point count
tarray[1,]  # Time bins used for the first point count
Yarray[4,,] # Data from 4th point count
rarray[4,]  # Distance bins used for the 4th point count
tarray[4,]  # Time bins used for the 4th point count
rarray[1:5,]
Yarray[1,,] # Data from first point count
rarray[1,]  # Distance bins used for the first point count
tarray[1,]  # Time bins used for the first point count
Yarray[2,,] # Data from 4th point count
rarray[2,]  # Distance bins used for the 4th point count
tarray[2,]  # Time bins used for the 4th point count
# Design matrix for tau (scaled covariate for better model convergence)
zFC <- scale(covariate.FC)
X1 <- model.matrix(~zFC)
colnames(X1) <- c("tau_int","tau_b1")
# Design matrix for phi (scaled covariate for better model convergence)
zDOY <- scale(covariate.DOY)
X2 <- model.matrix(~zDOY + I(zDOY^2))
colnames(X2) <- c("phi_int","phi_b1","phi_b2")
# -------------------------------------------------
# Fit the joint model
# -------------------------------------------------
start <- Sys.time()
fit <- cmulti_fit_joint(Yarray,
rarray,
tarray,
X1 = X1, # Design matrix for tau
X2 = X2  # Design matrix for phi
)
fit
start <- Sys.time()
fit <- cmulti_fit_joint(Yarray,
rarray,
tarray,
X1 = NULL, # Design matrix for tau
X2 = NULL # Design matrix for phi
)
end <- Sys.time()
print(end-start) # 1.7 minutes on my personal laptop
Yobs <- 1
offset_joint = 10
offset_indep = 5
D_joint = Yobs/offset_joint
D_indep = Yobs/offset_indep
(D_indep-D_joint)/D_joint * 100
Yobs <- 10
offset_joint = 10
offset_indep = 5
D_joint = Yobs/offset_joint
D_indep = Yobs/offset_indep
(D_indep-D_joint)/D_joint * 100
Yobs <- 10
offset_joint = 20
offset_indep = 5
D_joint = Yobs/offset_joint
D_indep = Yobs/offset_indep
(D_indep-D_joint)/D_joint * 100
Yobs <- 0.1
offset_joint = 20
offset_indep = 5
D_joint = Yobs/offset_joint
D_indep = Yobs/offset_indep
(D_indep-D_joint)/D_joint * 100
(offset_joint - offset_joint)/offset_joint * 100
(offset_joint - offset_indep)/offset_indep * 100
Yobs <- 0.1
offset_joint = 2
offset_indep = 1
D_joint = Yobs/offset_joint
D_indep = Yobs/offset_indep
(D_indep-D_joint)/D_joint * 100
(offset_joint - offset_indep)/offset_indep * 100
Yobs <- 5
offset_joint = 2
offset_indep = 1
D_joint = Yobs/offset_joint
D_indep = Yobs/offset_indep
(D_indep-D_joint)/D_joint * 100
(offset_joint - offset_indep)/offset_indep * 100
Yobs <- 0
offset_joint = 2
offset_indep = 1
D_joint = Yobs/offset_joint
D_indep = Yobs/offset_indep
(D_indep-D_joint)/D_joint * 100
(offset_joint - offset_indep)/offset_indep * 100
Yobs <- 0.001
offset_joint = 2
offset_indep = 1
D_joint = Yobs/offset_joint
D_indep = Yobs/offset_indep
(D_indep-D_joint)/D_joint * 100
(offset_joint - offset_indep)/offset_indep * 100
source("C:/Users/david/Documents/1_Work/Bird_Detectability/QPAD/bSims_examples/bSims_movement.R")
install.packages("bbsBayes")
library(bbsBayes)
fetch_bbs_data()
fetch_bbs_data(force=TRUE)
stratified_data <- stratify(by = "bbs_cws")
?prepare_jags_data
sum(seq(5,35))
sum(seq(5,35))/60
library(bSims)
library(CmultiJoint.dev)
library(detect)
set.seed(999)
# ------------------------------------
# Parameters
# -----------------------------------
phi <- 0.5
tau <- 1
# ------------------------------------
# Set up population
# -----------------------------------
l <- bsims_init(extent = 10)
p <- bsims_populate(l, 500)
# ------------------------------------
# Animate
# ------------------------------------
a <- bsims_animate(p,vocal_rate = phi,duration = 10)
# ------------------------------------
# Which cues are actually detected?
# ------------------------------------
d <- bsims_detect(a, tau = tau, event_type = "vocal")
# ------------------------------------
# Transcribe
# ------------------------------------
rint <- c(0.5,1,Inf) # Distance bins
tint <- c(3,5,10)       # Time bins
x <- bsims_transcribe(d,
rint = rint,
tint = tint,
condition = "event1")
Y <- get_table(x, "removal")
Y
Y/sum(Y)
Y1 <- rpois(1000,0.5)
Y2 <- sum(Y1)
d1 <- dpois(Y1,0.1,log=TRUE)
Y1 <- rpois(1000,0.5)
Y2 <- sum(Y1)
d1 <- dpois(Y1,0.1,log=TRUE)
d2 <- dpois(Y2,0.1,log=TRUE)
d1
d2
sum(d1)
d2
IJ = -6676.088
PP = -6971.337
IJPP = -6661.189
IJPP - IJ
IJ = -238.24
PP = -533.49
IJPP = -223.35
IJPP - IJ
IJ = -6676.088
PP = -6971.337
IJPP = -6661.189
PP-IJ
IJPP - IJ
IJ = -238.24
PP = -533.49
IJPP = -223.35
PP-IJ
IJPP - IJ
library(bSims)
library(ggpubr)
library(tidyverse)
library(detect)
set.seed(999)
tau = 1
phi = 0.5
Density_true = 10
results_df <- data.frame()
# ------------------------------------
# Conduct repeated simulations
# ------------------------------------
# ------------------------------------
# Set up population
# ------------------------------------
l <- bsims_init(extent = 5)
p <- bsims_populate(l, density = Density_true)
# ------------------------------------
# Animate
# ------------------------------------
a <- bsims_animate(p, vocal_rate = phi, duration = 10)
events <- get_events(a)
# ------------------------------------
# Which vocalizations are actually detected?
# ------------------------------------
d <- bsims_detect(a, tau=tau)
dets <- get_detections(d)
dim(dets)
get_table(dets)
head(dets)
library(bSims)
library(ggpubr)
library(tidyverse)
library(detect)
set.seed(999)
tau = 1
phi = 0.5
Density_true = 100
results_df <- data.frame()
# ------------------------------------
# Set up population
# ------------------------------------
l <- bsims_init(extent = 5)
p <- bsims_populate(l, density = Density_true)
# ------------------------------------
# Animate
# ------------------------------------
a <- bsims_animate(p, vocal_rate = phi, duration = 10)
events <- get_events(a)
# ------------------------------------
# Which vocalizations are actually detected?
# ------------------------------------
d <- bsims_detect(a, tau=tau)
dets <- get_detections(d)
dim(dets)
# Trim to first minute
d1 <- subset(dets, t <= 1)
d1
plot(t~d, data = d1)
x <- bsims_transcribe(d, rint = rint, tint = tint, condition = "det1")
x
get_table(x)
setwd("~/1_Work/Bird_Detectability/QPAD")
library(tidyverse)
library(ggpubr)
library(detect)
library(ggthemes)
rm(list=ls())
setwd("~/1_Work/Bird_Detectability/QPAD") # <- set to wherever scripts are stored
source("joint_fns.R")
result_df <- expand.grid(sim_rep = 1:500,
tau = seq(0.25,2.25,0.5),
phi = c(0.25,2.5),
Density = c(0.1,2.5),
tau_est_joint = NA,
phi_est_joint = NA,
log_offset_joint = NA,
Density_est_joint = NA,
tau_est_indep = NA,
phi_est_indep = NA,
log_offset_indep = NA,
Density_est_indep = NA
)
i = 1
library(ggpubr)
library(tidyverse)
library(detect)
rm(list=ls())
N = 50000 # Number of birds to place on landscape (select a high number to allow sufficient sample size)
dim = 1000 # landscape size (metres)
Density = N/dim^2
Density
results_df <- data.frame()
# Conduct simulations across a range of tau and phi
# ******************************************************************
# CUSTOM SIMULATION SCRIPT
# ******************************************************************
# - identical to 'vanilla' version of bSims
# - runs a bit faster because it lacks more complex situations
# - estimates q and p using cmulti()
# - illustrates that estimates are biased, unless each bird can only make a single cue during point counts
# ******************************************************************
library(ggpubr)
library(tidyverse)
library(detect)
rm(list=ls())
N = 50000 # Number of birds to place on landscape (select a high number to allow sufficient sample size)
dim = 1000 # landscape size (metres)
Density = N/dim^2
Density
results_df <- data.frame()
# Conduct simulations across a range of tau and phi
tau = 100
phi = 0.5
# ------------------------------------
# Place birds on landscape
# ------------------------------------
birds <- data.frame(bird_id = 1:N,
x = runif(N,-dim/2,dim/2),
y = runif(N,-dim/2,dim/2))
# Distances to observer
birds$dist <- sqrt(birds$x^2 + birds$y^2)
# ------------------------------------
# Simulate bird cues, based on phi
# ------------------------------------
cues <- matrix(NA, nrow=N, ncol = 10)
for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi))
cues <- cues %>%
reshape2::melt() %>%
rename(bird_id = Var1, cue_number = Var2, time = value) %>%
arrange(bird_id,cue_number)
cues$dist <- birds$dist[cues$bird_id]
# ------------------------------------
# Determine which cues are detected, based on tau
# ------------------------------------
# *****************************
# QPAD IS UNBIASED IF THE FOLLOWING SNIPPET IS USED FIRST
# cues <- subset(cues, cue_number == 1) # Each bird is only allowed to produce a single cue during the point count
# *****************************
cues$p<- exp(-(cues$dist/tau)^2)  # Probability each cue is detected
cues$detected <- rbinom(nrow(cues),1,cues$p) # binary variable: was cue actually detected?
# ------------------------------------
# Isolate first detected cue for each bird
# ------------------------------------
dat <- subset(cues,detected == 1)
dat <- dat[!duplicated(dat$bird_id),]
head(dat)
dim(dat)
plot(time~dist, data = dat)
plot(time~dist, data = subset(dat, time <= 1))
plot(time~dist, data = dat)
plot(time~dist, data = subset(dat, time <= 1))
plot(time~dist, data = dat)
plot(time~dist, data = subset(dat, time <= 10))
ggplot(subset(dat, time <= 10), aes(x = dist, y = time))+
geom_point()+
stat_smooth()
ggplot(subset(dat, time <= 10), aes(x = dist, y = time))+
geom_point()+
stat_smooth()+
xlab("Distance from Observer")+
ylab("Time at first detection")
ggplot(subset(dat, time <= 1), aes(x = dist, y = time))+
geom_point()+
stat_smooth()+
xlab("Distance from Observer")+
ylab("Time at first detection")
ggplot(subset(dat, time <= 1), aes(x = dist, y = time))+
geom_point()+
stat_smooth()+
xlab("Distance from Observer")+
ylab("Time at first detection")+
theme_bw()
ggplot(subset(dat, time <= 1), aes(x = dist, y = time))+
geom_point()+
stat_smooth()+
xlab("Distance from Observer (m)")+
ylab("Time at first detection")+
theme_bw()
ggplot(subset(dat, time <= 10), aes(x = dist, y = time))+
geom_point()+
stat_smooth()+
xlab("Distance from Observer (m)")+
ylab("Time at first detection")+
theme_bw()
ggplot(subset(dat, time <= 10), aes(x = dist, y = time))+
geom_point()+
stat_smooth()+
xlab("Distance from Observer (m)")+
ylab("Time at first detection")+
theme_bw()+
ggtitle("Relationship within 10-minute surveys")
ggplot(subset(dat, time <= 1), aes(x = dist, y = time))+
geom_point()+
stat_smooth()+
xlab("Distance from Observer (m)")+
ylab("Time at first detection")+
theme_bw()+
ggtitle("Relationship within first minute")
ggplot(subset(dat, time <= 10), aes(x = dist, y = time))+
geom_point()+
stat_smooth()+
xlab("Distance from Observer (m)")+
ylab("Time at first detection")+
theme_bw()+
ggtitle("Relationship within 10-minute surveys")
phi = 5
# ------------------------------------
# Place birds on landscape
# ------------------------------------
birds <- data.frame(bird_id = 1:N,
x = runif(N,-dim/2,dim/2),
y = runif(N,-dim/2,dim/2))
# Distances to observer
birds$dist <- sqrt(birds$x^2 + birds$y^2)
# ------------------------------------
# Simulate bird cues, based on phi
# ------------------------------------
cues <- matrix(NA, nrow=N, ncol = 10)
for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi))
cues <- cues %>%
reshape2::melt() %>%
rename(bird_id = Var1, cue_number = Var2, time = value) %>%
arrange(bird_id,cue_number)
cues$dist <- birds$dist[cues$bird_id]
# ------------------------------------
# Determine which cues are detected, based on tau
# ------------------------------------
# *****************************
# QPAD IS UNBIASED IF THE FOLLOWING SNIPPET IS USED FIRST
# cues <- subset(cues, cue_number == 1) # Each bird is only allowed to produce a single cue during the point count
# *****************************
cues$p<- exp(-(cues$dist/tau)^2)  # Probability each cue is detected
cues$detected <- rbinom(nrow(cues),1,cues$p) # binary variable: was cue actually detected?
# ------------------------------------
# Isolate first detected cue for each bird
# ------------------------------------
dat <- subset(cues,detected == 1)
dat <- dat[!duplicated(dat$bird_id),]
plot(time~dist, data = subset(dat, time <= 10))
plot(time~dist, data = subset(dat, time <= 1))
ggplot(subset(dat, time <= 1), aes(x = dist, y = time))+
geom_point()+
stat_smooth()+
xlab("Distance from Observer (m)")+
ylab("Time at first detection")+
theme_bw()+
ggtitle("Relationship within first minute")
dat <- subset(dat, time <= 10)
d1 <- subset(dat, time <= 1)
length(unique(d1$bird_id))
