cuerate_bias <- median((results_to_plot$phi_MLE - phi_to_plot)/phi_to_plot * 100) %>% round(1)
plot_phi <- ggplot(results_to_plot,aes(x = sim_rep, y = phi_MLE))+
geom_point(col="orangered")+
geom_hline(yintercept = phi_to_plot/0.8,col="transparent")+
geom_hline(yintercept = phi_to_plot,col="black")+
geom_hline(yintercept = mean(results_to_plot$phi_MLE), linetype = 2, col = "orangered")+
ylab("Phi (cues per minute)")+
xlab("Simulation #")+
ggtitle(paste0("Phi\nMedian bias = ",cuerate_bias,"%"))+
theme_bw()
Density_bias <- median((results_to_plot$D_hat - Density)/Density * 100) %>% round(1)
plot_Density <- ggplot(results_to_plot,aes(x = sim_rep, y = D_hat))+
geom_point(col="orangered")+
geom_hline(yintercept = median(results_to_plot$D_hat)*0.8,col="transparent")+
geom_hline(yintercept = Density,col="black")+
geom_hline(yintercept = median(results_to_plot$D_hat), linetype = 2, col = "orangered")+
ylab("Density")+
xlab("Simulation #")+
ggtitle("Density")+
ggtitle(paste0("Density\nMedian bias = +",Density_bias,"%"))+
theme_bw()
plot_Density
estimate_plot <- ggarrange(plot_tau,plot_phi,plot_Density, nrow=3)
estimate_plot <- annotate_figure(estimate_plot, top = paste0("True tau = ",tau_to_plot, " , True phi = ", phi_to_plot))
print(estimate_plot)
# --------------------------------------------------------------
# Plot median results across combinations of tau and phi
# --------------------------------------------------------------
results_df$percent_bias_Density <- (results_df$D_hat - Density)/Density * 100
results_summarized <- results_df %>%
group_by(tau,phi) %>%
summarize(percent_bias_Density = median(percent_bias_Density),
D_hat = median(D_hat),
tau_MLE = median(tau_MLE),
phi_MLE = median(phi_MLE))
plot_Density_bias <- ggplot(data = results_summarized,
aes(x = tau, y = percent_bias_Density, col = factor(phi)))+
geom_line()+
theme_bw()+
scale_color_manual(name = "Phi", values = c("dodgerblue","orangered"))+
ylab("Percent bias in density estimate")+
xlab("Tau")+
ggtitle("Bias in density estimates across\ncombinations of Tau and Phi")+
scale_y_continuous(limits = c(0,max(results_summarized$percent_bias_Density)))
plot_Density_bias
setwd("~/1_Work/Bird_Detectability/QPAD")
# ******************************************
# PART 1: SIMULATE DATA
# ******************************************
rm(list=ls())
tau_true = 0.5
phi_true = 1
N = 100000 # Number of birds to place on landscape (select a high number to provide sufficient sample size)
dim = 10 # landscape size (metres)
Density_true <- N/dim^2
# ------------------------------------
# Place birds on landscape around observer (centred on landscape)
# ------------------------------------
birds <- data.frame(x = runif(N,-dim/2,dim/2),
y = runif(N,-dim/2,dim/2))
# Distances to observer
birds$dist <- sqrt(birds$x^2 + birds$y^2)
# Remove birds outside maximum distance
birds <- subset(birds, dist <= (dim/2))
birds <- birds %>% arrange(dist)
birds$bird_id = 1:nrow(birds)
N = nrow(birds)
# ------------------------------------
# Simulate bird cues, based on phi_true
# ------------------------------------
cues <- matrix(NA, nrow=N, ncol = 100)
for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi_true))
cues <- cues %>%
reshape2::melt() %>%
rename(bird_id = Var1, cue_number = Var2, time = value) %>%
arrange(bird_id,cue_number)
cues$dist <- birds$dist[cues$bird_id]
# ------------------------------------
# Determine which cues are detected, based on tau_true
# ------------------------------------
cues$p<- exp(-(cues$dist/tau_true)^2)  # Probability each cue is detected
cues$detected <- rbinom(nrow(cues),1,cues$p) # binary variable: was cue actually detected?
# ------------------------------------
# Isolate first detected cue for each bird
# ------------------------------------
dat <- subset(cues,detected == 1)
dat <- dat[!duplicated(dat$bird_id),]
# ------------------------------------
# Transcription: distance and time bins
# ------------------------------------
rint <- c(0.5,1,2)
tint <- c(3,5,10)
nrint <- length(rint)
ntint <- length(tint)
# Separate into distance and time bins
dat$rint <- cut(dat$dist,c(0,rint))
dat$tint <- cut(dat$time,c(0,tint))
dat <- na.omit(dat)
Y <- table(dat[,c("rint","tint")])
Y # Data to analyze
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NUMERICAL INTEGRATION
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
f_d = function(dmax){
integrand = substitute(2*pi*dmax *(1-exp(-phi_true*tmax*exp(-dmax^2/tau_true^2))),
list(phi_true = phi_true,
tau_true = tau_true,
tmax = tmax))
eval(integrand)
}
# Calculate CDF
CDF_binned <- Y*NA
for (j in 1:length(tint)){
tmax = tint[j]
for (i in 1:length(rint)){
upper_r = rint[i]
if (upper_r == Inf) upper_r = max_dist
CDF_binned[i,j] = integrate(f_d,lower=0.0001,upper = upper_r, subdivisions = 1000)$value
}
}
# Difference to calculate multinomial cell probabilities
tmp1 = CDF_binned
for (i in 2:nrint){
tmp1[i,] <- CDF_binned[i,] - CDF_binned[i-1,]
}
p_matrix = tmp1
for (j in 2:ntint){
p_matrix[,j] <- tmp1[,j] - tmp1[,j-1]
}
p_matrix = p_matrix/sum(p_matrix)
# Should be equal (if Y has a large sample size)
p_matrix %>% round(3)
(Y/sum(Y)) %>% round(3)
Y
# ******************************************
# PART 1: SIMULATE DATA
# ******************************************
rm(list=ls())
tau_true = 0.5
phi_true = 1
N = 1000000 # Number of birds to place on landscape (select a high number to provide sufficient sample size)
dim = 10 # landscape size (metres)
Density_true <- N/dim^2
# ------------------------------------
# Place birds on landscape around observer (centred on landscape)
# ------------------------------------
birds <- data.frame(x = runif(N,-dim/2,dim/2),
y = runif(N,-dim/2,dim/2))
# Distances to observer
birds$dist <- sqrt(birds$x^2 + birds$y^2)
# Remove birds outside maximum distance
birds <- subset(birds, dist <= (dim/2))
birds <- birds %>% arrange(dist)
birds$bird_id = 1:nrow(birds)
N = nrow(birds)
# ------------------------------------
# Simulate bird cues, based on phi_true
# ------------------------------------
cues <- matrix(NA, nrow=N, ncol = 100)
for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi_true))
cues <- cues %>%
reshape2::melt() %>%
rename(bird_id = Var1, cue_number = Var2, time = value) %>%
arrange(bird_id,cue_number)
cues$dist <- birds$dist[cues$bird_id]
# ------------------------------------
# Determine which cues are detected, based on tau_true
# ------------------------------------
cues$p<- exp(-(cues$dist/tau_true)^2)  # Probability each cue is detected
cues$detected <- rbinom(nrow(cues),1,cues$p) # binary variable: was cue actually detected?
# ------------------------------------
# Isolate first detected cue for each bird
# ------------------------------------
dat <- subset(cues,detected == 1)
dat <- dat[!duplicated(dat$bird_id),]
# ------------------------------------
# Transcription: distance and time bins
# ------------------------------------
rint <- c(0.5,1,2)
tint <- c(3,5,10)
nrint <- length(rint)
ntint <- length(tint)
# Separate into distance and time bins
dat$rint <- cut(dat$dist,c(0,rint))
dat$tint <- cut(dat$time,c(0,tint))
dat <- na.omit(dat)
Y <- table(dat[,c("rint","tint")])
Y # Data to analyze
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NUMERICAL INTEGRATION
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
f_d = function(dmax){
integrand = substitute(2*pi*dmax *(1-exp(-phi_true*tmax*exp(-dmax^2/tau_true^2))),
list(phi_true = phi_true,
tau_true = tau_true,
tmax = tmax))
eval(integrand)
}
# Calculate CDF
CDF_binned <- Y*NA
for (j in 1:length(tint)){
tmax = tint[j]
for (i in 1:length(rint)){
upper_r = rint[i]
if (upper_r == Inf) upper_r = max_dist
CDF_binned[i,j] = integrate(f_d,lower=0.0001,upper = upper_r, subdivisions = 1000)$value
}
}
# Difference to calculate multinomial cell probabilities
tmp1 = CDF_binned
for (i in 2:nrint){
tmp1[i,] <- CDF_binned[i,] - CDF_binned[i-1,]
}
p_matrix = tmp1
for (j in 2:ntint){
p_matrix[,j] <- tmp1[,j] - tmp1[,j-1]
}
p_matrix = p_matrix/sum(p_matrix)
# Should be equal (if Y has a large sample size)
p_matrix %>% round(3)
(Y/sum(Y)) %>% round(3)
# ******************************************
# PART 1: SIMULATE DATA
# ******************************************
rm(list=ls())
tau_true = 0.1
phi_true = 1
N = 1000000 # Number of birds to place on landscape (select a high number to provide sufficient sample size)
dim = 10 # landscape size (metres)
Density_true <- N/dim^2
# ------------------------------------
# Place birds on landscape around observer (centred on landscape)
# ------------------------------------
birds <- data.frame(x = runif(N,-dim/2,dim/2),
y = runif(N,-dim/2,dim/2))
# Distances to observer
birds$dist <- sqrt(birds$x^2 + birds$y^2)
# Remove birds outside maximum distance
birds <- subset(birds, dist <= (dim/2))
birds <- birds %>% arrange(dist)
birds$bird_id = 1:nrow(birds)
N = nrow(birds)
# ------------------------------------
# Simulate bird cues, based on phi_true
# ------------------------------------
cues <- matrix(NA, nrow=N, ncol = 100)
for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi_true))
# ******************************************
# PART 1: SIMULATE DATA
# ******************************************
rm(list=ls())
tau_true = 0.1
phi_true = 1
N = 1000000 # Number of birds to place on landscape (select a high number to provide sufficient sample size)
dim = 10 # landscape size (metres)
Density_true <- N/dim^2
# ------------------------------------
# Place birds on landscape around observer (centred on landscape)
# ------------------------------------
birds <- data.frame(x = runif(N,-dim/2,dim/2),
y = runif(N,-dim/2,dim/2))
# Distances to observer
birds$dist <- sqrt(birds$x^2 + birds$y^2)
# Remove birds outside maximum distance
birds <- subset(birds, dist <= (dim/2))
birds <- birds %>% arrange(dist)
birds$bird_id = 1:nrow(birds)
N = nrow(birds)
# ------------------------------------
# Simulate bird cues, based on phi_true
# ------------------------------------
cues <- matrix(NA, nrow=N, ncol = 20)
for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi_true))
cues <- cues %>%
reshape2::melt() %>%
rename(bird_id = Var1, cue_number = Var2, time = value) %>%
arrange(bird_id,cue_number)
cues$dist <- birds$dist[cues$bird_id]
# ------------------------------------
# Determine which cues are detected, based on tau_true
# ------------------------------------
cues$p<- exp(-(cues$dist/tau_true)^2)  # Probability each cue is detected
cues$detected <- rbinom(nrow(cues),1,cues$p) # binary variable: was cue actually detected?
# ------------------------------------
# Isolate first detected cue for each bird
# ------------------------------------
dat <- subset(cues,detected == 1)
dat <- dat[!duplicated(dat$bird_id),]
# ------------------------------------
# Transcription: distance and time bins
# ------------------------------------
rint <- c(0.5,1,2)
tint <- c(3,5,10)
nrint <- length(rint)
ntint <- length(tint)
# Separate into distance and time bins
dat$rint <- cut(dat$dist,c(0,rint))
dat$tint <- cut(dat$time,c(0,tint))
dat <- na.omit(dat)
Y <- table(dat[,c("rint","tint")])
Y # Data to analyze
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NUMERICAL INTEGRATION
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
f_d = function(dmax){
integrand = substitute(2*pi*dmax *(1-exp(-phi_true*tmax*exp(-dmax^2/tau_true^2))),
list(phi_true = phi_true,
tau_true = tau_true,
tmax = tmax))
eval(integrand)
}
# Calculate CDF
CDF_binned <- Y*NA
for (j in 1:length(tint)){
tmax = tint[j]
for (i in 1:length(rint)){
upper_r = rint[i]
if (upper_r == Inf) upper_r = max_dist
CDF_binned[i,j] = integrate(f_d,lower=0.0001,upper = upper_r, subdivisions = 1000)$value
}
}
# Difference to calculate multinomial cell probabilities
tmp1 = CDF_binned
for (i in 2:nrint){
tmp1[i,] <- CDF_binned[i,] - CDF_binned[i-1,]
}
p_matrix = tmp1
for (j in 2:ntint){
p_matrix[,j] <- tmp1[,j] - tmp1[,j-1]
}
p_matrix = p_matrix/sum(p_matrix)
# Should be equal (if Y has a large sample size)
p_matrix %>% round(3)
(Y/sum(Y)) %>% round(3)
# ******************************************
# PART 1: SIMULATE DATA
# ******************************************
rm(list=ls())
tau_true = 1.5
phi_true = 0.2
N = 1000000 # Number of birds to place on landscape (select a high number to provide sufficient sample size)
dim = 10 # landscape size (metres)
Density_true <- N/dim^2
# ------------------------------------
# Place birds on landscape around observer (centred on landscape)
# ------------------------------------
birds <- data.frame(x = runif(N,-dim/2,dim/2),
y = runif(N,-dim/2,dim/2))
# Distances to observer
birds$dist <- sqrt(birds$x^2 + birds$y^2)
# Remove birds outside maximum distance
birds <- subset(birds, dist <= (dim/2))
birds <- birds %>% arrange(dist)
birds$bird_id = 1:nrow(birds)
N = nrow(birds)
# ------------------------------------
# Simulate bird cues, based on phi_true
# ------------------------------------
cues <- matrix(NA, nrow=N, ncol = 20)
for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi_true))
cues <- cues %>%
reshape2::melt() %>%
rename(bird_id = Var1, cue_number = Var2, time = value) %>%
arrange(bird_id,cue_number)
cues$dist <- birds$dist[cues$bird_id]
# ------------------------------------
# Determine which cues are detected, based on tau_true
# ------------------------------------
cues$p<- exp(-(cues$dist/tau_true)^2)  # Probability each cue is detected
cues$detected <- rbinom(nrow(cues),1,cues$p) # binary variable: was cue actually detected?
# ------------------------------------
# Isolate first detected cue for each bird
# ------------------------------------
dat <- subset(cues,detected == 1)
dat <- dat[!duplicated(dat$bird_id),]
# ------------------------------------
# Transcription: distance and time bins
# ------------------------------------
rint <- c(0.5,1,2)
tint <- c(3,5,10)
nrint <- length(rint)
ntint <- length(tint)
# Separate into distance and time bins
dat$rint <- cut(dat$dist,c(0,rint))
dat$tint <- cut(dat$time,c(0,tint))
dat <- na.omit(dat)
Y <- table(dat[,c("rint","tint")])
Y # Data to analyze
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NUMERICAL INTEGRATION
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
f_d = function(dmax){
integrand = substitute(2*pi*dmax *(1-exp(-phi_true*tmax*exp(-dmax^2/tau_true^2))),
list(phi_true = phi_true,
tau_true = tau_true,
tmax = tmax))
eval(integrand)
}
# Calculate CDF
CDF_binned <- Y*NA
for (j in 1:length(tint)){
tmax = tint[j]
for (i in 1:length(rint)){
upper_r = rint[i]
if (upper_r == Inf) upper_r = max_dist
CDF_binned[i,j] = integrate(f_d,lower=0.0001,upper = upper_r, subdivisions = 1000)$value
}
}
# Difference to calculate multinomial cell probabilities
tmp1 = CDF_binned
for (i in 2:nrint){
tmp1[i,] <- CDF_binned[i,] - CDF_binned[i-1,]
}
p_matrix = tmp1
for (j in 2:ntint){
p_matrix[,j] <- tmp1[,j] - tmp1[,j-1]
}
p_matrix = p_matrix/sum(p_matrix)
# Should be equal (if Y has a large sample size)
p_matrix %>% round(3)
(Y/sum(Y)) %>% round(3)
# ******************************************
# PART 1: SIMULATE DATA
# ******************************************
rm(list=ls())
tau_true = 1.5
phi_true = 0.2
N = 500000 # Number of birds to place on landscape (select a high number to provide sufficient sample size)
dim = 10 # landscape size (metres)
Density_true <- N/dim^2
# ------------------------------------
# Place birds on landscape around observer (centred on landscape)
# ------------------------------------
birds <- data.frame(x = runif(N,-dim/2,dim/2),
y = runif(N,-dim/2,dim/2))
# Distances to observer
birds$dist <- sqrt(birds$x^2 + birds$y^2)
# Remove birds outside maximum distance
birds <- subset(birds, dist <= (dim/2))
birds <- birds %>% arrange(dist)
birds$bird_id = 1:nrow(birds)
N = nrow(birds)
# ------------------------------------
# Simulate bird cues, based on phi_true
# ------------------------------------
cues <- matrix(NA, nrow=N, ncol = 20)
for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi_true))
cues <- cues %>%
reshape2::melt() %>%
rename(bird_id = Var1, cue_number = Var2, time = value) %>%
arrange(bird_id,cue_number)
cues$dist <- birds$dist[cues$bird_id]
# ------------------------------------
# Determine which cues are detected, based on tau_true
# ------------------------------------
cues$p<- exp(-(cues$dist/tau_true)^2)  # Probability each cue is detected
cues$detected <- rbinom(nrow(cues),1,cues$p) # binary variable: was cue actually detected?
# ------------------------------------
# Isolate first detected cue for each bird
# ------------------------------------
dat <- subset(cues,detected == 1)
dat <- dat[!duplicated(dat$bird_id),]
# ------------------------------------
# Transcription: distance and time bins
# ------------------------------------
rint <- c(0.5,1,2)
tint <- c(3,5,10)
nrint <- length(rint)
ntint <- length(tint)
# Separate into distance and time bins
dat$rint <- cut(dat$dist,c(0,rint))
dat$tint <- cut(dat$time,c(0,tint))
dat <- na.omit(dat)
Y <- table(dat[,c("rint","tint")])
Y # Data to analyze
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NUMERICAL INTEGRATION
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
f_d = function(dmax){
integrand = substitute(2*pi*dmax *(1-exp(-phi_true*tmax*exp(-dmax^2/tau_true^2))),
list(phi_true = phi_true,
tau_true = tau_true,
tmax = tmax))
eval(integrand)
}
# Calculate CDF
CDF_binned <- Y*NA
for (j in 1:length(tint)){
tmax = tint[j]
for (i in 1:length(rint)){
upper_r = rint[i]
if (upper_r == Inf) upper_r = max_dist
CDF_binned[i,j] = integrate(f_d,lower=0.0001,upper = upper_r, subdivisions = 1000)$value
}
}
# Difference to calculate multinomial cell probabilities
tmp1 = CDF_binned
for (i in 2:nrint){
tmp1[i,] <- CDF_binned[i,] - CDF_binned[i-1,]
}
p_matrix = tmp1
for (j in 2:ntint){
p_matrix[,j] <- tmp1[,j] - tmp1[,j-1]
}
p_matrix = p_matrix/sum(p_matrix)
# Should be equal (if Y has a large sample size)
p_matrix %>% round(3)
(Y/sum(Y)) %>% round(3)
Y
# Should be equal (if Y has a large sample size)
p_matrix %>% round(4)
(Y/sum(Y)) %>% round(4)
